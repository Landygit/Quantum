import numpy as np
from random_mix import random_mixed_state
def rho_to_vec(rho: np.ndarray) -> np.ndarray:
    if rho.shape[0] != rho.shape[1]:
        raise ValueError("rho must be square")
    D = rho.shape[0]
    vec = np.empty(D * D, dtype=np.float64)
    k = 0
    for i in range(D):
        vec[k] = rho[i, i].real          # 对角
        k += 1
        for j in range(i + 1, D):
            vec[k] = rho[i, j].real      # 上三角实部
            vec[k + 1] = rho[i, j].imag  # 上三角虚部
            k += 2
    return vec
"""eg output:[ 0.10186593 -0.03815347  0.00432536 -0.01379331  0.10210395 -0.02088015
 -0.00025318 -0.03114697 -0.01275473 -0.07320631 -0.00350272 -0.06773426
 -0.00785684  0.00826663  0.02237221  0.1250353   0.00994773 -0.0474051
  0.03204434 -0.0650334   0.05576343  0.01790556  0.08651652 -0.03723832
  0.00053012 -0.0028243   0.00291985 -0.01852572  0.16296673  0.02779034
  0.01598437 -0.00921927  0.04562259  0.02421374  0.08037131 -0.00090156
  0.06269811 -0.0128415  -0.02194154  0.15077882  0.0254275   0.05096003
  0.07210214  0.04024457 -0.02644786  0.03373333  0.0183645   0.01845717
  0.09971559  0.0488211  -0.03045264  0.02018893 -0.00679153  0.0114941
 -0.01506249  0.15748867  0.01498467 -0.02508142 -0.00143362 -0.04080855
  0.14240155  0.01744917 -0.03394174  0.05974743]
  where n = 3, D = 2^n = 8
"""

'''
# quick check
if __name__ == "__main__":
    for n in [3]: 
        D = 2 ** n
        rho = random_mixed_state(D)
        vec = rho_to_vec(rho)
        print(vec)
'''